// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AddEventsInput struct {
	Token       string    `json:"token"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
	Location    string    `json:"location"`
	ImageURL    string    `json:"imageURL"`
	Link        string    `json:"link"`
	Date        time.Time `json:"date"`
}

type AddHeroInput struct {
	Token    string `json:"token"`
	Title    string `json:"title"`
	Subtitle string `json:"subtitle"`
	Banner1  string `json:"banner1"`
	Banner2  string `json:"banner2"`
}

type AssignCourseToTutorInput struct {
	TutorEmail string `json:"tutorEmail"`
	CourseID   string `json:"courseId"`
	Token      string `json:"token"`
}

type Assignment struct {
	ID          string    `json:"id"`
	CourseID    string    `json:"courseId"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Files       []*File   `json:"files"`
	DueDate     time.Time `json:"dueDate"`
	Marks       *int      `json:"marks"`
	Remark      *string   `json:"remark"`
}

type AuthPayload struct {
	Token string `json:"token"`
	Name  string `json:"name"`
	Logo  string `json:"logo"`
}

type Badge struct {
	ID          string `json:"id"`
	PhotoURL    string `json:"photoUrl"`
	Redeemed    bool   `json:"redeemed"`
	PointsIndex int    `json:"pointsIndex"`
}

type Certificate struct {
	ID                 string            `json:"id"`
	Student            *Student          `json:"student"`
	Course             *Course           `json:"course"`
	CompletionDate     time.Time         `json:"completionDate"`
	URL                string            `json:"url"`
	Title              string            `json:"title"`
	Description        string            `json:"description"`
	Issuer             string            `json:"issuer"`
	ExpiryDate         *time.Time        `json:"expiryDate"`
	Status             CertificateStatus `json:"status"`
	TemplateID         *string           `json:"templateId"`
	VerificationURL    *string           `json:"verificationUrl"`
	RevocationDate     *time.Time        `json:"revocationDate"`
	RevocationReason   *string           `json:"revocationReason"`
	IssuerSignatureURL *string           `json:"issuerSignatureUrl"`
	SealImageURL       *string           `json:"sealImageUrl"`
}

type ChangeMeetingStatus struct {
	Token     string                `json:"token"`
	ID        string                `json:"id"`
	NewStatus PersonalMeetingStatus `json:"newStatus"`
}

type ChangePasswordInput struct {
	Token              string `json:"token"`
	OldPassword        string `json:"oldPassword"`
	NewPassword        string `json:"newPassword"`
	ConfirmNewPassword string `json:"confirmNewPassword"`
}

type Chapter struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

type Course struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Icon        string      `json:"icon"`
	Description string      `json:"description"`
	Enrolled    int         `json:"enrolled"`
	Tutor       string      `json:"tutor"`
	Quizes      int         `json:"quizes"`
	Cost        int         `json:"cost"`
	Duration    string      `json:"duration"`
	Level       CourseLevel `json:"level"`
	Lessons     int         `json:"lessons"`
	Type        CourseType  `json:"type"`
}

type CourseFilesInput struct {
	Token    string       `json:"token"`
	Files    []*FileInput `json:"files"`
	CourseID string       `json:"courseId"`
}

type CreateAssignmentInput struct {
	Token       string       `json:"token"`
	CourseID    string       `json:"courseId"`
	Title       string       `json:"title"`
	Description string       `json:"description"`
	DueDate     time.Time    `json:"dueDate"`
	Files       []*FileInput `json:"files"`
}

type CreateQuizInput struct {
	Token          string           `json:"token"`
	Title          string           `json:"title"`
	CourseID       string           `json:"courseId"`
	QuestionsInput []*QuestionInput `json:"questionsInput"`
}

type EditEventsInput struct {
	EventID     string    `json:"eventId"`
	Token       string    `json:"token"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
	Location    string    `json:"location"`
	ImageURL    string    `json:"imageURL"`
	Link        string    `json:"link"`
	Date        time.Time `json:"date"`
}

type EditHeroInput struct {
	HeroID   string `json:"heroId"`
	Token    string `json:"token"`
	Title    string `json:"title"`
	Subtitle string `json:"subtitle"`
	Banner1  string `json:"banner1"`
	Banner2  string `json:"banner2"`
}

type Email struct {
	ID      string `json:"id"`
	From    string `json:"from"`
	To      string `json:"to"`
	Subject string `json:"subject"`
	Body    string `json:"body"`
}

type EmailSendingInput struct {
	Token   string `json:"token"`
	To      string `json:"to"`
	Subject string `json:"subject"`
	Body    string `json:"body"`
}

type Event struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
	Location    string    `json:"location"`
	ImageURL    string    `json:"imageURL"`
	Link        string    `json:"link"`
	Date        time.Time `json:"date"`
}

type File struct {
	Name string `json:"name"`
	URL  string `json:"url"`
}

type FileInput struct {
	Name string `json:"name"`
	URL  string `json:"url"`
}

type Hero struct {
	ID       string `json:"id"`
	Title    string `json:"title"`
	Subtitle string `json:"subtitle"`
	Banner1  string `json:"banner1"`
	Banner2  string `json:"banner2"`
	Ref      string `json:"ref"`
}

type IssueCertificateInput struct {
	StudentID          string     `json:"studentId"`
	CourseID           string     `json:"courseId"`
	CompletionDate     time.Time  `json:"completionDate"`
	Title              string     `json:"title"`
	Description        string     `json:"description"`
	Issuer             string     `json:"issuer"`
	ExpiryDate         *time.Time `json:"expiryDate"`
	VerificationURL    *string    `json:"verificationUrl"`
	IssuerSignatureURL *string    `json:"issuerSignatureUrl"`
	SealImageURL       *string    `json:"sealImageUrl"`
}

type LayoutDetails struct {
	Points   int `json:"points"`
	Emails   int `json:"emails"`
	Courses  int `json:"courses"`
	Meetings int `json:"meetings"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     Role   `json:"role"`
}

type MarkAssignentInput struct {
	Token        string  `json:"token"`
	SubmissionID string  `json:"submissionId"`
	Marks        int     `json:"marks"`
	Remark       *string `json:"remark"`
}

type Meeting struct {
	ID              string    `json:"id"`
	Title           string    `json:"title"`
	Description     string    `json:"description"`
	Link            string    `json:"link"`
	Recording       string    `json:"recording"`
	Time            time.Time `json:"time"`
	CourseID        string    `json:"courseId"`
	VidSDKMeetingID string    `json:"vidSDKMeetingID"`
	CourseName      string    `json:"courseName"`
}

type NewChapter struct {
	CourseID    string `json:"courseId"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Token       string `json:"token"`
}

type NewCourse struct {
	Name        string      `json:"name"`
	Icon        string      `json:"icon"`
	Cost        int         `json:"cost"`
	Description string      `json:"description"`
	Duration    string      `json:"duration"`
	Schoolref   string      `json:"schoolref"`
	Token       string      `json:"token"`
	Courselevel CourseLevel `json:"courselevel"`
	Coursetype  CourseType  `json:"coursetype"`
}

type NewSchoolAdmin struct {
	Email      string `json:"email"`
	DevToken   string `json:"devToken"`
	Ref        string `json:"ref"`
	Password   string `json:"password"`
	AdminName  string `json:"adminName"`
	SchoolName string `json:"schoolName"`
}

type NewSection struct {
	ChapterID string `json:"chapterId"`
	Heading   string `json:"heading"`
	Content   string `json:"content"`
	Token     string `json:"token"`
}

type NewTutor struct {
	Email string `json:"email"`
	Name  string `json:"name"`
	Token string `json:"token"`
}

type Participant struct {
	Name string `json:"name"`
}

type PersonalMeeting struct {
	ID        string                `json:"id"`
	Status    PersonalMeetingStatus `json:"status"`
	Tutorname string                `json:"tutorname"`
	Link      string                `json:"link"`
	Tutorid   string                `json:"tutorid"`
	UserName  string                `json:"userName"`
	UserID    string                `json:"userId"`
	CreatedAt time.Time             `json:"createdAt"`
	StartHour int                   `json:"startHour"`
	EndHour   int                   `json:"endHour"`
}

type PersonalMeetingInput struct {
	CourseID string    `json:"courseId"`
	Token    string    `json:"token"`
	Start    time.Time `json:"start"`
}

type Question struct {
	Text    string   `json:"text"`
	Choices []string `json:"choices"`
}

type QuestionInput struct {
	Text    string   `json:"text"`
	Choices []string `json:"choices"`
	Answer  []string `json:"answer"`
}

type Quiz struct {
	ID        string      `json:"id"`
	Title     string      `json:"title"`
	CourseID  string      `json:"courseId"`
	Questions []*Question `json:"questions"`
}

type QuizResult struct {
	Quiz        *Quiz    `json:"quiz"`
	Marks       *int     `json:"marks"`
	Total       *int     `json:"total"`
	RealAnswers []string `json:"realAnswers"`
	Answers     []string `json:"answers"`
}

type RegisterStudentInput struct {
	Name            string `json:"name"`
	Email           string `json:"email"`
	Password        string `json:"password"`
	ConfirmPassword string `json:"confirmPassword"`
	School          string `json:"school"`
}

type RepoCreateionForCourseInput struct {
	Token           string `json:"token"`
	CourseID        string `json:"courseId"`
	RepoName        string `json:"repoName"`
	RepoDescription string `json:"repoDescription"`
}

type ResetPasswordInput struct {
	Token              string `json:"token"`
	StudentsEmail      string `json:"studentsEmail"`
	NewPassword        string `json:"newPassword"`
	ConfirmNewPassword string `json:"confirmNewPassword"`
}

type Result struct {
	StudentName string            `json:"studentName"`
	StudentID   string            `json:"studentId"`
	Marks       int               `json:"marks"`
	Total       int               `json:"total"`
	QuizID      string            `json:"quizId"`
	Done        StudentQuizStatus `json:"done"`
}

type ScheduleMeetingInput struct {
	Token       string    `json:"token"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	CourseID    string    `json:"courseId"`
	Time        time.Time `json:"time"`
}

type School struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Section struct {
	Heading string `json:"heading"`
	Content string `json:"content"`
}

type Student struct {
	ID         string        `json:"id"`
	Name       string        `json:"name"`
	JoinedAt   time.Time     `json:"joinedAt"`
	Points     int           `json:"points"`
	SchoolName string        `json:"schoolName"`
	Email      string        `json:"email"`
	Status     StudentStatus `json:"status"`
	Enrolls    int           `json:"enrolls"`
}

type StudentQuizResult struct {
	Quiz          *Quiz `json:"quiz"`
	Attempts      int   `json:"attempts"`
	TotalEnrolled int   `json:"totalEnrolled"`
	AverageMark   int   `json:"averageMark"`
}

type Submission struct {
	ID             string      `json:"id"`
	CourseID       string      `json:"courseId"`
	Assignment     *Assignment `json:"assignment"`
	Files          []*File     `json:"files"`
	Note           *string     `json:"note"`
	Marks          *int        `json:"marks"`
	Remark         *string     `json:"remark"`
	SubmissionDate time.Time   `json:"submissionDate"`
	StudentID      string      `json:"studentId"`
	StudentName    string      `json:"studentName"`
}

type SubmitAssignmentInput struct {
	Token        string       `json:"token"`
	AssignmentID string       `json:"assignmentId"`
	Note         *string      `json:"note"`
	Files        []*FileInput `json:"files"`
}

type SubmitQuizInput struct {
	Token   string   `json:"token"`
	QuizID  string   `json:"quizId"`
	Answers []string `json:"answers"`
}

type User struct {
	ProfilePhoto string    `json:"profilePhoto"`
	ID           string    `json:"id"`
	Name         string    `json:"name"`
	JoinedAt     time.Time `json:"joinedAt"`
	Email        string    `json:"email"`
}

type CertificateStatus string

const (
	CertificateStatusValid   CertificateStatus = "VALID"
	CertificateStatusRevoked CertificateStatus = "REVOKED"
	CertificateStatusExpired CertificateStatus = "EXPIRED"
)

var AllCertificateStatus = []CertificateStatus{
	CertificateStatusValid,
	CertificateStatusRevoked,
	CertificateStatusExpired,
}

func (e CertificateStatus) IsValid() bool {
	switch e {
	case CertificateStatusValid, CertificateStatusRevoked, CertificateStatusExpired:
		return true
	}
	return false
}

func (e CertificateStatus) String() string {
	return string(e)
}

func (e *CertificateStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CertificateStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CertificateStatus", str)
	}
	return nil
}

func (e CertificateStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CourseLevel string

const (
	CourseLevelBeginner     CourseLevel = "BEGINNER"
	CourseLevelIntermediate CourseLevel = "INTERMEDIATE"
	CourseLevelAdvanced     CourseLevel = "ADVANCED"
)

var AllCourseLevel = []CourseLevel{
	CourseLevelBeginner,
	CourseLevelIntermediate,
	CourseLevelAdvanced,
}

func (e CourseLevel) IsValid() bool {
	switch e {
	case CourseLevelBeginner, CourseLevelIntermediate, CourseLevelAdvanced:
		return true
	}
	return false
}

func (e CourseLevel) String() string {
	return string(e)
}

func (e *CourseLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CourseLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CourseLevel", str)
	}
	return nil
}

func (e CourseLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CourseType string

const (
	CourseTypePublic  CourseType = "PUBLIC"
	CourseTypePrivate CourseType = "PRIVATE"
)

var AllCourseType = []CourseType{
	CourseTypePublic,
	CourseTypePrivate,
}

func (e CourseType) IsValid() bool {
	switch e {
	case CourseTypePublic, CourseTypePrivate:
		return true
	}
	return false
}

func (e CourseType) String() string {
	return string(e)
}

func (e *CourseType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CourseType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CourseType", str)
	}
	return nil
}

func (e CourseType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailType string

const (
	EmailTypeInbox  EmailType = "INBOX"
	EmailTypeOutbox EmailType = "OUTBOX"
)

var AllEmailType = []EmailType{
	EmailTypeInbox,
	EmailTypeOutbox,
}

func (e EmailType) IsValid() bool {
	switch e {
	case EmailTypeInbox, EmailTypeOutbox:
		return true
	}
	return false
}

func (e EmailType) String() string {
	return string(e)
}

func (e *EmailType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailType", str)
	}
	return nil
}

func (e EmailType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PersonalMeetingStatus string

const (
	PersonalMeetingStatusRejected  PersonalMeetingStatus = "REJECTED"
	PersonalMeetingStatusAccpeted  PersonalMeetingStatus = "ACCPETED"
	PersonalMeetingStatusRequested PersonalMeetingStatus = "REQUESTED"
)

var AllPersonalMeetingStatus = []PersonalMeetingStatus{
	PersonalMeetingStatusRejected,
	PersonalMeetingStatusAccpeted,
	PersonalMeetingStatusRequested,
}

func (e PersonalMeetingStatus) IsValid() bool {
	switch e {
	case PersonalMeetingStatusRejected, PersonalMeetingStatusAccpeted, PersonalMeetingStatusRequested:
		return true
	}
	return false
}

func (e PersonalMeetingStatus) String() string {
	return string(e)
}

func (e *PersonalMeetingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PersonalMeetingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PersonalMeetingStatus", str)
	}
	return nil
}

func (e PersonalMeetingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RolePatner  Role = "PATNER"
	RoleStudent Role = "STUDENT"
	RoleTutor   Role = "TUTOR"
)

var AllRole = []Role{
	RoleAdmin,
	RolePatner,
	RoleStudent,
	RoleTutor,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RolePatner, RoleStudent, RoleTutor:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StudentQuizStatus string

const (
	StudentQuizStatusDone   StudentQuizStatus = "DONE"
	StudentQuizStatusUndone StudentQuizStatus = "UNDONE"
)

var AllStudentQuizStatus = []StudentQuizStatus{
	StudentQuizStatusDone,
	StudentQuizStatusUndone,
}

func (e StudentQuizStatus) IsValid() bool {
	switch e {
	case StudentQuizStatusDone, StudentQuizStatusUndone:
		return true
	}
	return false
}

func (e StudentQuizStatus) String() string {
	return string(e)
}

func (e *StudentQuizStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StudentQuizStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StudentQuizStatus", str)
	}
	return nil
}

func (e StudentQuizStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StudentStatus string

const (
	StudentStatusActive   StudentStatus = "ACTIVE"
	StudentStatusInactive StudentStatus = "INACTIVE"
)

var AllStudentStatus = []StudentStatus{
	StudentStatusActive,
	StudentStatusInactive,
}

func (e StudentStatus) IsValid() bool {
	switch e {
	case StudentStatusActive, StudentStatusInactive:
		return true
	}
	return false
}

func (e StudentStatus) String() string {
	return string(e)
}

func (e *StudentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StudentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StudentStatus", str)
	}
	return nil
}

func (e StudentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
